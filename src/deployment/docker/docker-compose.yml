version: '3.8'

services:
  recognition:
    build:
      context: .
      dockerfile: deployment/docker/recognition/Dockerfile
    image: cernoid/recognition:latest
    container_name: cernoid_recognition
    restart: unless-stopped
    ports:
      - "8000:8000"
    volumes:
      - ./models:/app/models:ro
      - ./data:/app/data:rw
      - ./logs:/app/logs:rw
    environment:
      - CUDA_VISIBLE_DEVICES=0
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]

  camera:
    build:
      context: .
      dockerfile: deployment/docker/camera/Dockerfile
    image: cernoid/camera:latest
    container_name: cernoid_camera
    restart: unless-stopped
    ports:
      - "8001:8001"
    volumes:
      - ./data:/app/data:rw
      - ./logs:/app/logs:rw
    devices:
      - "/dev/video0:/dev/video0"
      - "/dev/video1:/dev/video1"

  api:
    build:
      context: .
      dockerfile: deployment/docker/api/Dockerfile
    image: cernoid/api:latest
    container_name: cernoid_api
    restart: unless-stopped
    ports:
      - "8002:8002"
    volumes:
      - ./data:/app/data:ro
      - ./logs:/app/logs:rw
    depends_on:
      - recognition
      - camera

  dashboard:
    build:
      context: .
      dockerfile: deployment/docker/dashboard/Dockerfile
    image: cernoid/dashboard:latest
    container_name: cernoid_dashboard
    restart: unless-stopped
    ports:
      - "8003:8003"
    volumes:
      - ./data:/app/data:ro
      - ./logs:/app/logs:rw
    depends_on:
      - recognition
      - camera
      - api

networks:
  default:
    name: cernoid_network
    driver: bridge

volumes:
  models:
  data:
  logs: 